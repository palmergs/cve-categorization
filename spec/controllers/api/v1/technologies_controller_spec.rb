require 'rails_helper'

RSpec.describe Api::V1::TechnologiesController, type: :controller do

  describe '#index' do
    it 'can get technologies' do
      get :index, format: :json
      expect(response).to be_success
    end

    it 'can query by name' do
      tech = create(:technology)
      get :index, format: :json, params: { q: 'test', o: 'name', d: 'asc' }
      expect(response).to be_success
    end
  end

  describe '#show' do
    it 'will fail to get an non-existant technology' do
      expect do
        get :show, format: :json, params: { id: 0 }
      end.to raise_error ActiveRecord::RecordNotFound
    end
  end

  describe '#create' do
    it 'can create a technology' do
      post :create, format: :json, params: { technology: { name: Faker::Hacker.noun } }
      expect(response).to be_success
    end
  end

  describe '#update' do
    it 'will fail to update an non-existant technology' do
      expect do
        put :update, format: :json, params: { id: 0, technology: { name: Faker::Hacker.noun } }
      end.to raise_error ActiveRecord::RecordNotFound
    end

    it 'can update a technology' do
      tech = create(:technology)
      put :update, format: :json, params: { id: tech.id, technology: { name: "New Name" } }
      expect(response).to be_success
      expect(Technology.find(tech.id).name).to eq('New Name')
    end
  end

  describe '#destroy' do
    it 'will fail to destroy an non-existant technology' do
      expect do
        delete :destroy, format: :json, params: { id: 0 }
      end.to raise_error ActiveRecord::RecordNotFound
    end

    it 'will destory a technology' do
      tech = create(:technology)
      delete :destroy, format: :json, params: { id: tech.id }
      expect(response).to be_success
      expect(Technology.exists?(id: tech.id)).to be false
    end
  end
end
