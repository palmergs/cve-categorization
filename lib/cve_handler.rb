class CveHandler

  def initialize
    @depth = 0
    @current_vulnerability = nil
    @current_url = nil
    @current_element = nil
    @current_attrs = nil
  end

  def on_element namespace, name, attrs = {}
    if name == 'Vulnerability'
      @current_vulnerability = Vulnerability.new
    elsif name == 'Reference'
      @current_url = Reference.new
    else
      @current_element = name
      @current_attrs = attrs
    end
  end

  def on_text text
    tmp = one_line(text)
    case @current_element
    when 'URL'
      @current_url.url = tmp if @current_url
    when 'Description'
      @current_url.description = tmp if @current_url
    when 'Note'
      if @current_attrs['Type'] == 'Description'
        @current_vulnerability.description = tmp if @current_vulnerability
      elsif @current_attrs['Title'] == 'Published'
        @current_vulnerability.publish_date = tmp if @current_vulnerability
      end
    when 'CVE'

      # At this point we have enough enformation to save the CVE
      # (so we can enforce uniqueness contraint on the referenes)
      begin
        @current_vulnerability.cve = tmp
        @current_vulnerability.save!
      rescue ActiveRecord::RecordInvalid
        warn "Unable to save vulnerability :: #{ @current_vulnerability.errors.full_messages}"
        @current_vulnerability = nil
      end
    end
  end

  def after_element namespace, name
    if name == 'Vulnerability'
      if @current_vulnerability

        # Strip out any references that happen to be invalid
        @current_vulnerability.references.each do |ref|
          unless ref.save
            warn "Unable to save reference :: #{ ref.errors.full_messages }"
            ref.destroy
          end
        end

        # Update vulnerability with any additional fields that have been aggregated
        warn "Unable to update vulnerability :: #{ @current_vulnerability.errors.full_messages }" unless @current_vulnerability.save

        @current_vulnerability = nil
      end
    elsif name == 'Reference'
      if @current_vulnerability
        if @current_url.url.present?
          @current_vulnerability.references << @current_url
        end
      end
      @current_url = nil
    end
    @current_element = nil
    @current_attrs = nil
  end

  def one_line text
    encoded = text.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
    encoded.gsub(/[\n\r\t\s]+/m, ' ')
  end
end
