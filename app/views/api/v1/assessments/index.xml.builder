xml.cvrfdoc('xmlns:cvrf' => 'http://www.icasi.org/CVRF/schema/cvrf/1.1',
    'xmlns' => 'http://www.icasi.org/CVRF/schema/cvrf/1.1',
    'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance',
    'xsi:schemaLocation' => 'http://www.icasi.org/CVRF/schema/cvrf/1.1 http://www.icasi.org/CVRF/schema/cvrf/1.1/cvrf.xsd') do
  xml.DocumentTitle("Dynamically CVE Output in CVRF 1.1: #{ Time.now.strftime('%Y%m%d') }", 'xml:lang' => 'en')
  xml.DocumentType('CVE List')
  xml.DocumentPublisher('Type' => 'Other') do
    xml.ContactDetails('cve@example.com')
    xml.IssuingAuthority('none')
  end
  xml.DocumentTracking do
    xml.Identification do
      xml.ID("#{ Time.now.strftime('%Y%m%d-%H%M%S%L') }")
    end
    xml.Status('Interim')
    xml.Version("#{ Time.now.strftime('%Y.%-m.%-d.%H') }")
    xml.RevisionHistory do
      xml.Revision do
        xml.Number(1)
        xml.Date(DateTime.now.to_s)
        xml.Description("Dynamically generated CVE list based on local query parameters")
      end
    end
    xml.InitialReleaseDate(DateTime.now.to_s)
    xml.CurrentReleaseDate(DateTime.now.to_s)
    xml.Generator do
      xml.Engine('CVE Assessment Application')
    end
  end
  xml.DocumentNotes do
    xml.Note('This is a list of CVE Identifiers generated dynamically from CVE Assessment Application. CVE Contents are trucated to only include descriptions and refernced URLs.', 'Ordinal' => 1)
    xml.Note('ALL DOCUMENTS AND THE INFORMATION CONTAINED THEREIN ARE PROVIDED ON AN "AS IS" BASIS AND THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE MITRE CORPORATION, ITS BOARD OF TRUSTEES, OFFICERS, AGENTS, AND EMPLOYEES, DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION THEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.', 'Ordinal' => 2)
  end
  @vulnerabilities.each_with_index do |vuln, idx|
    xml.Vulnerability('xmlsn' => 'http://www.icasi.org/CVRF/schema/vuln/1.1', 'Ordinal' => (idx + 1)) do
      xml.Title(vuln.cve)
      xml.Notes do
        xml.Note(vuln.description, 'Type' => 'Description', 'Ordinal' => 1)
        xml.Note(vuln.publish_date, 'Type' => 'Other', 'Title' => 'Published', 'Ordinal' => 2)
      end
      xml.CVE(vuln.cve)
      xml.References do
        vuln.references.each_with_index do |ref, ref_idx|
          xml.Reference do
            xml.URL(ref.url)
            xml.Description(ref.description)
          end
        end
      end
    end
  end
end
