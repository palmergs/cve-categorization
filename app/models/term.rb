class Term < ApplicationRecord
  include Concerns::HasIds

  MIN = -2**16
  MAX = 2**26

  belongs_to :technology

  has_many :term_assessments, dependent: :destroy
  has_many :assessments, through: :term_assessments
  has_many :vulnerabilities, through: :assessments

  validates :term, presence: true, uniqueness: { scope: :technology_id }
  validates :value, presence: true, numericality: { only_integer: true, greater_than: -4, less_than: 4 }

  scope :by_technology, ->(id) {
    if id.present?
      where(technology_id: id.to_i)
    end
  }

  scope :by_value, ->(min, max) {
    if min.present? || max.present?
      min = min.present? ? Integer(min) : MIN
      max = max.present? ? Integer(max) : MAX
      min, max = max, min if max < min
      where(value: min..max)
    end
  }

  scope :by_query, ->(q) {
    if q.present?
      str = normalize_query(q)
      if str.present?
        where('terms.term like ?', "%#{ str }%")
      else
        where('7=6')
      end
    end
  }

  after_create do |term|
    Vulnerability.by_query(term.term).each do |v|
      ass = Assessment.find_or_create_by(technology_id: term.technology_id, vulnerability_id: v.id)
      ass.term_assessments.create(term_id: term.id, value: term.value)
    end
  end
end
