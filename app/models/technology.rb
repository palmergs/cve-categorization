# Technology that may be affected by Vulnerabilities
class Technology < ApplicationRecord
  include Concerns::HasIds

  has_many :terms, dependent: :destroy
  has_many :assessments, dependent: :destroy
  has_many :vulnerabilities, through: :assessments

  validates :name, presence: true, uniqueness: true

  scope :by_query, ->(q) {
    if q.present?
      str = normalize_query(q)
      if str.length > 1
        where('technologies.name like ?', "%#{ str }%")
      else
        where('1=0')
      end
    end
  }

  def user_selected
    vulnerabilities.where('assessments.user_assessment_sum > 0')
  end

  def user_rejected
    vulnerabilities.where('assessments.user_assessment_sum < 0')
  end

  def term_likely
    vulnerabilities.where('assessments.term_assessment_sum > 0 and assessments.user_assessment_sum = 0')
  end

  def term_unlikely
    vulnerabilities.where('assessments.term_assessment_sum < 0 and assessments.user_assessment_sum = 0')
  end

  def categorized
    vulnerabilities.joins(:assessments).where(assessments: { technology_id: self.id })
  end

  def uncategorized
    Vulnerability.where.not(id: categorized)
  end

  def vulnerabilties_by_assessment assessment
    case Integer(assessment)
    when Assessment::USER_REJECTED
      user_rejected
    when Assessment::USER_SELECTED
      user_selected
    when Assessment::TERM_LIKELY
      term_likely
    when Assessment::UNCATEGORIZED
      uncategorized
    else
      categorized
    end
  end
end
