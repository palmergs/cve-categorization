class Assessment < ApplicationRecord

  CATEGORIZED =    99
  USER_SELECTED =   2
  TERM_LIKELY =     1
  UNCATEGORIZED =   0
  TERM_UNLIKELY =  -1
  USER_REJECTED =  -2

  belongs_to :vulnerability
  belongs_to :technology

  has_many :term_assessments, dependent: :delete_all
  has_many :terms, through: :term_assessments

  has_many :user_assessments, dependent: :delete_all

  scope :by_vulnerability, ->(id) { where(vulnerability_id: Integer(id)) if id.present? }

  scope :by_technology, ->(id) { where(technology_id: Integer(id)) if id.present? }

  # NOTE: this probably can be removed; didn't have the default set when the
  # database was intially set up.
  after_initialize do |obj|
    obj.user_assessment_count = 0 unless obj.user_assessment_count
    obj.user_assessment_sum = 0 unless obj.user_assessment_sum
    obj.term_assessment_count = 0 unless obj.term_assessment_count
    obj.term_assessment_sum = 0 unless obj.term_assessment_sum
  end

  def assessment
    return USER_REJECTED if user_assessment_sum < 0
    return USER_SELECTED if user_assessment_sum > 0
    return TERM_UNLIKELY if term_assessment_sum < 0
    return TERM_LIKELY if term_assessment_sum > 0
    return UNCATEGORIZED
  end

  def likely_terms
    terms.to_a.select {|term| term.value > 0 }.map(&:term)
  end

  def unlikely_terms
    terms.to_a.select {|term| term.value < 0 }.map(&:term)
  end
end
