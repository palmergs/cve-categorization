class Vulnerability < ApplicationRecord
  include Concerns::HasIds

  has_many :references, dependent: :destroy

  has_many :vulnerability_inspections, dependent: :destroy

  has_many :term_vulnerabilities, dependent: :destroy
  has_many :tech_terms, through: :term_vulnerabilities
  has_many :technologies, through: :tech_terms

  validates :cve, uniqueness: true, presence: true

  scope :by_technology, ->(id) {
    if id
      if id.to_i > 0
        distinct.
            joins('LEFT JOIN vulnerability_inspections ON vulnerability_inspections.vulnerability_id = vulnerabilities.id').
            joins('LEFT JOIN term_vulnerabilities ON term_vulnerabilities.vulnerability_id = vulnerabilities.id').
            joins('LEFT JOIN tech_terms ON tech_terms.id = term_vulnerabilities.tech_term_id').
            where('tech_terms.technology_id = ? OR vulnerability_inspections.technology_id = ?', id.to_i, id.to_i)
      else
        where('4=5')
      end
    end
  }

  scope :by_query, ->(q) {
    if q.present?
      str = normalize_query(q)
      if str.length > 1
        where('vulnerabilities.description like ?', "%#{ str }%")
      else
        where('2=0')
      end
    end
  }

  scope :by_year, ->(y) {
    if y && y.to_i > 1990 && y.to_i <= Time.current.year
      where('vulnerabilities.cve like ?', "CVE-#{ y }-%")
    end
  }

  scope :has_inspections, -> {
    where('vulnerabilities.vulnerability_inspections_count > 0')
  }

  scope :has_terms, -> {
    where('vulnerabilities.term_vulnerabilities_count > 0')
  }

  def inspected?
    self.vulnerability_inspections_count > 0
  end

  def terms?
    self.term_vulnerabilities_count > 0
  end
end
