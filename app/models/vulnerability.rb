class Vulnerability < ApplicationRecord
  include Concerns::HasIds

  has_many :references, dependent: :destroy
  has_many :assessments, dependent: :destroy
  has_many :technologies, through: :assessments

  has_many :user_assessments, through: :assessments
  has_many :term_assessments, through: :assessments

  validates :cve, uniqueness: true, presence: true

  scope :no_technology, ->(technology_id) {
    if technology_id
      left_outer_joins(:assessments).where(assessments: {
        technology_id: technology_id,
        id: nil })
    end
  }

  scope :by_technology, ->(technology_id, assessment = nil) {
    if technology_id
      case assessment
      when Assessment::USER_REJECTED
        joins(:assessments).where(assessments: {
          technology_id: technology_id,
          user_assessment_sum:  (-Float::INFINITY..-1) })
      when Assessment::USER_SELECTED
        joins(:assessments).where(assessments: {
          technology_id: technology_id,
          user_assessment_sum: (1..Float::INFINITT) })
      when Assessment::TERM_LIKELY
        joins(:assessments).where(assessments: {
          technology_id: technology_id,
          term_assessment_sum: (1..Float::INFINITY) })
      when Assessment::TERM_UNLIKELY
        joins(:assessments).where(assessments: {
          technology_id: technology_id,
          term_assessment_sum: (-Float::INFINITY..1) })
      else
        joins(:assessments).where(assessments: { technology_id: technology_id })
      end
    end
  }

  scope :by_year, ->(year) {
    if year.present?
      if year.to_i > 1990 && year.to_i <= Time.now.year
        where('cve like ?', "CVE-#{ year.to_i }-%")
      else
        where('2=3')
      end
    end
  }

  scope :by_query, ->(q) {
    if q.present?
      str = sanitize_sql_like(q)
      if str.present?
        where('vulnerabilities.description like ?', "%#{ str }%")
      else
        where('1=2')
      end
    end
  }

  after_create do |vuln|
    Term.all.each do |term|
      if vuln.description.index(term.term)
        ass = Assessment.find_or_create_by({
          technology_id: term.technology_id,
          vulnerability_id: vuln.id })
        ass.term_assessments.create(term_id: term.id, value: term.value)
      end
    end
  end
end
