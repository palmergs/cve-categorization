class Api::V1::TermsController < ApplicationController
  include Concerns::HasPagination

  def index
    @terms = Term.by_technology(params[:technology_id]).
        by_query(filter[:q]).
        by_value(filter[:min], filter[:max]).
        by_ids(ids).
        page(current_page).
        per(current_size).
        order(current_sort)
    render json: @terms, meta: meta(@terms)
  end

  def show
    @terms = Term.find(params[:id])
    render json: @terms
  end

  def create
    @term = Term.new(create_term_params)
    if @term.save
      render json: @term
    else
      render json: @term.errors.full_messages, status: :unprocessable_entity
    end
  end

  def destroy
    @term = Term.find(params[:id])
    if @term.destroy
      head :ok
    else
      render json: @term.errors.full_messages, status: :unprocessable_entity
    end
  end

  def available_cols
    hash = super
    hash[:term] = [ :asc, :desc ]
    hash[:value] = [ :asc, :desc ]
    hash
  end

  private

    def create_term_params
      # params.require(:term).permit(:technology_id, :term, :value)
      ActiveModelSerializers::Deserialization.jsonapi_parse(params)
      # {"data"=>{"attributes"=>{"term"=>"GNU Binutils 2.28", "value"=>-1}, "relationships"=>{"technology"=>{"data"=>{"type"=>"technologies", "id"=>"2"}}}, "type"=>"terms"}
    end
end
