class Api::V1::AssessmentsController < ApplicationController
  include Concerns::HasPagination

  def index
    tech = Technology.find(params[:technology_id])
    base_query = tech.vulnerabilties_by_assessment(filter[:assess]).
        by_query(filter[:q]).
        by_year(filter[:year])
    respond_to do |format|
      format.json {
        vulnerabilities = base_query.
            page(current_page).
            per(current_size).
            order(current_sort)
        count = vulnerabilities.total_count
        @assessments = vulnerabilities.map {|vuln| assessment(tech, vuln) }
        render json: @assessments, meta: meta(vulnerabilities, count)
      }
      format.text {
        label = Assessment.to_label(filter[:assess])
        time = Time.now.strftime('%Y%m%d%H%M%S%L')
        send_data(
            base_query.all.map(&:cve).join("\n"),
            type: 'text/plain',
            filename: "#{ tech.name } #{ label } #{ time }.txt".gsub(/\s+/, '-').downcase)
      }
      format.xml {
        @vulnerabilities = base_query
      }
    end
  end

  def show
    tech, vuln = tech_and_vuln(params[:id])
    @assessment = assessment(tech, vuln)
    render json: @assessment
  end

  def update
    tech, vuln = tech_and_vuln(update_assessment_params[:id])
    @assessment = assessment(tech, vuln)
    @assessment.save if @assessment.new_record? || @assessment.changed?

    # NOTE: this assumes no users; will need to be changed when users is added as a model
    @assessment.user_assessments.destroy_all
    @assessment.user_assessments.create(value: update_assessment_params[:value])
    render json: @assessment
  end

  private

  def assessment tech, vuln
    Assessment.find_or_initialize_by(technology_id: tech.id, vulnerability_id: vuln.id)
  end

  def update_assessment_params
    ActiveModelSerializers::Deserialization.jsonapi_parse(params, only: [ :id, :value ])
  end

  def tech_and_vuln id
    tech_id, vuln_id = id.split('.').map(&:to_i)
    [ Technology.find(tech_id), Vulnerability.find(vuln_id) ]
  end

end
