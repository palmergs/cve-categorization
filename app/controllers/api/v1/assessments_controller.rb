class Api::V1::AssessmentsController < ApplicationController
  include Concerns::HasPagination

  def index
    tech = Technology.find(params[:technology_id])
    vulnerabilities = tech.vulnerabilties_by_assessment(filter[:assess]).
        by_query(filter[:q]).
        by_year(filter[:year]).
        page(current_page).
        per(current_size).
        order(current_sort)

    @assessments = vulnerabilities.map {|vuln| assessment(tech, vuln) }
    render json: @assessments, meta: meta(vulnerabilities)
  end

  def show
    tech_id, vuln_id = params[:id].split('.').map {|s| Integer(s) }
    tech = Technology.find(tech_id)
    vuln = Vulnerability.find(vuln_id)
    @assessment = assessment(tech, vuln)
    render json: @assessment
  end

  def update
    tech_id, vuln_id = update_assessment_params[:id].split('.').map {|s| Integer(s) }
    tech = Technology.find(tech_id)
    vuln = Vulnerability.find(vuln_id)
    @assessment = assessment(tech, vuln)
    @assessment.save if @assessment.new_record? || @assessment.changed?

    # NOTE: this assumes no users; will need to be changed when users is
    # added as a model
    @assessment.user_assessments.destroy_all
    @assessment.user_assessments.create({ value: update_assessment_params[:value] })
    render json: @assessment
  end

  private

    def assessment tech, vuln
      Assessment.find_or_initialize_by({ technology_id: tech.id, vulnerability_id: vuln.id })
    end

    def update_assessment_params
      ActiveModelSerializers::Deserialization.jsonapi_parse(params, only: [ :id, :value ])
      # params.require(:data).require(:attributes).permit(:name)
    end

end
