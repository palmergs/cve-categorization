import Ember from 'ember';
import ENV from '../config/environment';

export default Ember.Component.extend({
  assess: 0,
  techId: null,

  badgeColor: 'is-primary',


  baseDownloadPath: Ember.computed('techId', function() {
    return `${ ENV['apiHost'] }/${ ENV['apiNamespace'] }`;
  }),

  textDownloadPath: Ember.computed('baseDownloadPath', function() {
    const downloadParams = `technology_id=${ this.get('techId' )}&filter[assess]=${ this.get('assess') }`;
    return `${ this.get('baseDownloadPath') }/assessments.txt?${ downloadParams }`;
  }),

  xmlDownloadPath: Ember.computed('baseDownloadPath', function() {
    const downloadParams = `technology_id=${ this.get('techId' )}&filter[assess]=${ this.get('assess') }`;
    return `${ this.get('baseDownloadPath') }/assessments.xml?${ downloadParams }`;
  }),

  hasMore: Ember.computed('model.meta', function() {
    const page = this.get('model.meta.page'),
        count = this.get('model.meta.page-count');
    return (page && count && page < count);
  }),

  sortColumn: 'id',
  sorted: Ember.computed.sort('model.data', function(a, b) {
    return a.get('id') - b.get('id');
  }),

  actions: {
    onAssessmentChanged(assessment) {
      if(assessment.get('assessment') !== this.get('assess')) {
        this.decrementProperty('model.meta.total');
        this.get('model.data').removeObject(assessment);
        if(this.get('model.data.length') < 4) {
          this.sendAction('loadMore', this.get('assess'));
        }
      }
      this.sendAction('assessmentChanged', assessment);
    },

    onTermAdded(term, value) {
      this.sendAction('termAdded', term, value);
    },

    loadMore() {
      this.sendAction('loadMore', this.get('assess'));
    }
  }
});
